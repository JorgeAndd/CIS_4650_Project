%{
	#include "nodes.h"
	#include "y.tab.h"
	#include <stdio.h>

	
	int comment_line;
	char linebuf[160];
	
	int tokenpos = 0;

%}

%option yylineno
%x COMMENT
%x CODE

%%

<COMMENT>"*/" 			{ BEGIN(CODE); }
<COMMENT>([^*]|\n)+|.	
<COMMENT><<EOF>>		{ warning("Unterminated comment", comment_line); return -1;}

<INITIAL>{
	.*$		{ strncpy(linebuf, yytext, sizeof(linebuf));
			  yyless(0);
			  tokenpos=0;  
			  BEGIN(CODE);
			}				
}

<CODE>{
"/*"            					{ BEGIN(COMMENT); comment_line = yylineno;}
[0-9]+								tokenpos += yyleng; yylval.ival = atoi(yytext); return INT;
[0-9]+\.[0-9]+([Ee][+-]?[0-9]+)?	tokenpos += yyleng; yylval.fval = atof(yytext); return FLOAT;
\'[a-zA-Z]\'						tokenpos += yyleng; yylval.cval = yytext[1]; return CHAR;

"=="	tokenpos += yyleng; return EQUAL;
"!="	tokenpos += yyleng; return DIFF;
">="	tokenpos += yyleng; return GE;
"<="	tokenpos += yyleng; return LE;

"&&"	tokenpos += yyleng; return AND;
"||"	tokenpos += yyleng; return OR;
"!"		tokenpos += yyleng; return NOT;

"="			tokenpos += yyleng; return ASSIGN;
"sizeof"	tokenpos += yyleng; return SIZEOF;
"typedef"	tokenpos += yyleng; return TYPEDEF;

"int"		tokenpos += yyleng; return TKINT;
"char"		tokenpos += yyleng; return TKCHAR;
"float"		tokenpos += yyleng; return TKFLOAT;

"++"	tokenpos += yyleng; return INC;
"--"	tokenpos += yyleng; return DEC;

"if"		tokenpos += yyleng; return IF;
"else"		tokenpos += yyleng; return ELSE;
"for"		tokenpos += yyleng; return FOR;
"while"		tokenpos += yyleng; return WHILE;
"return"	tokenpos += yyleng; return RETURN;
"void"		tokenpos += yyleng; return VOID;
"struct"	tokenpos += yyleng; return STRUCT;

[a-zA-Z_][a-zA-Z0-9]*				tokenpos += yyleng; yylval.sval = strdup(yytext); return NAME;
\n.*		{ strncpy(linebuf, yytext+1, sizeof(linebuf));
			  yyless(1);
			  tokenpos=0;
			}
			
			
[ \t\r]+	tokenpos += yyleng;
.			tokenpos += yyleng; return *yytext;	
}

%%
 
